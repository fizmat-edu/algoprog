import label from "../../lib/label"
import page  from "../../lib/page"
import problem from "../../lib/problem"
import topic from "../../lib/topic"

module25368 = () ->
    page("Про \"странные числа\" в коде", String.raw"""
        <div class="box generalbox generalboxcontent boxaligncenter clearfix"><h1>Про "странные числа" в коде</h1>
        <p>Иногда в ваших программах вам может быть нужно использовать какие-то фиксированные числа, возникающие из смысла задачи. Например, если вы решаете задачу про часы, то, скорее всего, у вас в программе появятся числа типа 60 (минут в часах) или 24 (часов в сутках). Тогда вы прямо указываете это число в программе, как, например, в задаче "Электронные часы - 1" с уровня 1А:</p>
        <pre>b = a % 60  # питон
        b := a mod 60;  // паскаль
        </pre>
        
        <p>Это абсолютно нормально. (Если вы будете потом писать серьезные большие программы, то от вас могут потребовать заводить специальные переменные-"константы" под эти числа, но сейчас речь не об этом, и в наших задачах это не обязательно.)</p>
        
        <p>Но бывает так, что в программе вам нужно какое-то число, которое вы с ходу не знаете, которое вам надо как-то вычислять. Например, вам надо в программе знать, на какой угол (сколько градусов) сдвигается минутная стрелка за одну минуту. Вряд ли вы это число назовете с ходу из головы. Зато понятно, как его считать: надо полный угол (360 градусов) поделить на 12 часов и то, что получится, поделить на 60 минут. </p>
        
        <p>Что вы в таком случае делаете? Вы берете калькулятор и на нем считаете, сколько будет <code>360/12/60</code>. Вы получаете 0.5 и прямо так и оставляете это число (0.5) прямо в коде программы:</p>
        <pre>b = a * 0.5  # питон
        b := a * 0.5;  // паскаль
        </pre>
        <p>Вот это уже неправильный подход.</p>
        
        <p>Любой язык программирования прекрасно работает как калькулятор. Поэтому не надо использовать внешний калькулятор. Просто напишите в программе прямо полностью выражение:</p>
        <pre>b = a * 360 / 12 / 60  # питон
        b := a * 360 / 12 / 60;  // паскаль
        </pre>
        
        <p>Вот так — намного лучше. Почему?</p>
        <ul>
        <li>Во-первых, так проще. Вам не надо лезть в калькулятор, считать там что-то, и вводить результат число в программу. Вы сразу тут вводите формулу, и компьютер делает работу за вас.</li>
        <li>Во-вторых, так надежнее. Вы можете случайно ввести в калькулятор не то число, или ошибиться при вводе результата в программу. Частая ситуация — если результат получается в виде длинной десятичной дроби, то вы вручную можете ввести слишком мало знаков. А компьютер посчитает за вас настолько точно, насколько он только может.</li>
        <li>Наконец, так понятнее. Если вы вернетесь к своей программе через неделю, вы вряд ли сразу вспомните, что такое 0.5 и откуда вы его взяли. А если вы увидите формулу <code>360/12/60</code>, все сразу станет понятнее, т.к. 360, 12 и 60 — вполне понятные в этой задаче числа, и скорее всего вы сразу вспомните, почему что и на что вы делили. Аналогично, программа будет понятнее для других людей, кто ее будет смотреть. Наконец, если у вас в формуле на самом деле ошибка (как простейший пример — вы разделили на 24 вместо 12), то заметить ее намного проще, чем если бы у вас в программе был только результат.</li>
        </ul>
        
        <p>Аналогичные соображения относятся и к другим ситуациям. Например, вам в программе может потребоваться код символа A. Вы можете посмотреть в таблицу символов и увидеть, что это 65. А можете написать <code>ord('A')</code>. Вот второй вариант намного лучше первого — пусть компьютер сам за вас считает, преимущества все те же, что описаны выше. Если вам надо знать, насколько коды заглавных букв отличаются от маленьких — тоже пишите формулу. И т.д.</p>
        
        <p>Вообще, общее правило:</p>
        <div style="border:1px solid black; padding: 10px;">Если вам в программе нужно использовать число, которое вы сразу называете из головы (например, количество минут в часе), то просто пишите это число. Если же вам нужно число, которые вы как-то вычисляете, то не пишите его в программе, а пишите формулу.</div></div>
    """, {skipTree: true})

export default arithmeticalOperations = () ->
    return {
        topic: topic("Арифметические операции", "Задачи на арифметические операции", [
            label("<a href=\"https://notes.algoprog.ru/python_basics/0_quick_start.html\">Начало работы c питоном и Wing IDE</a>"),
            problem(2938),
            problem(2939),
            problem(2937),
            problem(2936),
            problem(2941),
            problem(2942),
            problem(2943),
            problem(2944),
            problem(2947),
            problem(2951),
            problem(2952),
        ], "arithmetical_operations"),
        advancedTopics: [
            topic("Вещественные числа", null, [
                label("Если вы еще не решали задачи на вещественные числа из уровня 1Б, то прочитайте там теорию и прорешайте все эти задачи. Там есть тонкости, которые обязательно надо знать."),
            ]),
            topic("Основы тестирования задач (без контеста)", null, [
                label("<a href=\"https://notes.algoprog.ru/testing/06_testing_main.html\">Теория по тестированию задач</a>. Вы там многое не поймете (особенно в примерах и в продвинутых методиках тестирования), но поймите хотя бы основы. В будущем, на более высоких уровнях, возвращайтесь к этому тексту.")
            ]),
            topic("Задачи", "Продвинутые задачи на арифметические операции: в них запрещается пользоваться if'ами и циклами", [
                module25368(),
                label("<br>"),
                # problem({testSystem: "ejudge", contest: "2003", problem: "1", id: "2946"}),
                problem(2945),
                problem(506),
                problem(534),
            ]),
            page("Разбор задачи \"Строки в книге\" (читать только тем, кто ее решил!)", String.raw"""
                <div class="box generalbox generalboxcontent boxaligncenter clearfix"><h1>Разбор задачи "Строки в книге"</h1>
                
                <p>Первая идея, которая возникает в этой задаче -- это написать <code>N mod K</code> и <code>N div K+1</code>. Но, к сожалению, это не работает, когда <code>N</code> делится на <code>K</code>.</p>
                
                <p>Если бы в этой задаче можно было бы пользоваться условным оператором (if), то все было бы просто. Если бы эта задача была бы на реальной олимпиаде, то, конечно, так и пишите if. Но здесь в учебных целях if'ом пользоваться нельзя.</p>
                
                <p>На помощь придет следующая идея. Давайте сначала попробуем решить немного другую задачу: будем считать, что <i>всё</i>, что есть в этой задаче — строки в книге, страницы и строки на странице — <i>нумеруется с нуля</i>. (А <i>количество</i> строк на странице, конечно, как и раньше считается с 1.) Тогда, если, например, <code>K=3</code>, то на нулевой странице идут строки 0, 1, 2; на первой странице идут строки 3 4 5 и т.д. И несложно видеть, что вот как раз в этом случае достаточно просто разделить <code>N</code> на <code>K</code>; ответом будет <code>N div K</code> и <code>N mod K</code>; это работает во всех случаях.</p>
                
                <p>Теперь вернемся к нашей задаче. Нам вводится номер строки, если считать с единицы. Попробуем свести нашу задачу к той, которую мы только что решили; для этого вычтем из <code>N</code> единицу — получится номер строки в книге как если бы нумерация шла с нуля. Дальше разделим полученное число с остатком на <code>K</code> и получим правильные номер страницы и номер строки на странице, только нумерация всего всё еще идет с нуля. Прибавим к ответам 1, чтобы получить нумерацию с единицы.</p>
                
                <p>Итого решение задачи: <code>(N-1) div K + 1</code> и <code>(N-1) mod K + 1</code>.</p>
                
                <p>Вообще, это очень полезная идея — если задача плохо решается при нумерации с единицы, иногда оказывается намного проще перейти к нумерации с нуля. Особенно вот в подобных задачах, где вам явно надо делить на равные части.</p></div>
            """, {skipTree: true})
        ]
    }